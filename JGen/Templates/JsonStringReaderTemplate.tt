<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>

using System.IO;
using System.Text;

namespace JGen.Readers
{
	public static class JsonStringReader
	{
		public static string Read(TextReader textReader)
		{
			var buffer = new StringBuilder(10);

			int ls = textReader.Read();
			if (ls  != '"')
				throw new JsonException("Invalid JSON string literal format");

			buffer.Length = 0;
			while (true)
			{
				int c = textReader.Read();
				if (c < 0)
					throw new JsonException("JSON string is not closed");
				if (c == '"')
					return buffer.ToString();
				else if (c != '\\')
				{
					buffer.Append((char)c);
					continue;
				}

				// escaped expression
				c = textReader.Read();
				if (c < 0)
					throw new JsonException("Invalid JSON string literal; incomplete escape sequence");
				switch (c)
				{
					case '"':
					case '\\':
					case '/':
						buffer.Append((char)c);
						break;
					case 'b':
						buffer.Append('\x8');
						break;
					case 'f':
						buffer.Append('\f');
						break;
					case 'n':
						buffer.Append('\n');
						break;
					case 'r':
						buffer.Append('\r');
						break;
					case 't':
						buffer.Append('\t');
						break;
					case 'u':
						ushort cp = 0;
						for (int i = 0; i < 4; i++)
						{
							cp <<= 4;
							if ((c = textReader.Read()) < 0)
								throw new JsonException("Incomplete unicode character escape literal");
							if ('0' <= c && c <= '9')
								cp += (ushort)(c - '0');
							if ('A' <= c && c <= 'F')
								cp += (ushort)(c - 'A' + 10);
							if ('a' <= c && c <= 'f')
								cp += (ushort)(c - 'a' + 10);
						}
						buffer.Append((char)cp);
						break;
					default:
						throw new JsonException("Invalid JSON string literal; unexpected escape character");
				}
			}
		}
	}
}
